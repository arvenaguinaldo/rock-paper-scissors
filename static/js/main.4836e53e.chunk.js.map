{"version":3,"sources":["assets/images/rock.png","assets/images/paper.png","assets/images/scissors.png","components/Button/Button.js","containers/Player/Player.js","containers/Home/Home.js","containers/Computer/Computer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","state","active","this","props","children","className","classNames","Component","Player","playerScore","computerScore","computerChoice","playerChoice","count","timerOn","result","getComputerChoice","Math","floor","random","handleWin","setState","handleLose","handleDraw","handlePlayAgain","handleGame","choice","timer","setInterval","prevState","clearInterval","src","RockImage","alt","PaperImage","ScissorsImage","onClick","to","bind","Home","computer1Score","computer1Choice","computerResult","computer1Result","App","path","exact","component","Computer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4836e53e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rock.67841ae7.png\";","module.exports = __webpack_public_path__ + \"static/media/paper.431d47b0.png\";","module.exports = __webpack_public_path__ + \"static/media/scissors.72e4797b.png\";","import React, { Component } from 'react'\nimport classNames from 'classnames';\nimport './Button.css'\n\n\nexport default class Button extends Component {\n  state = {\n    active: false\n  }\n\n\n  render() {\n    const {children, active, className} = this.props;\n\n    return (\n      <div\n        {...this.props}\n        className={classNames(`button ${active ? 'active' : null}`, className)}\n      >\n        {children}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport RockImage from '../../assets/images/rock.png'\nimport PaperImage from '../../assets/images/paper.png'\nimport ScissorsImage from '../../assets/images/scissors.png'\nimport Button from '../../components/Button/Button'\n\nimport './Player.css';\n\nexport default class Player extends Component {\n  state = {\n    playerScore: 0,\n    computerScore: 0,\n    computerChoice: '',\n    playerChoice: '',\n    count: 5,\n    timerOn: true,\n    result: ''\n  }\n\n  getComputerChoice = () => {\n    const choices = ['r', 'p', 's'];\n    const randomNumber = Math.floor(Math.random() * 3)\n    return choices[randomNumber]\n  }\n\n  handleWin = () => {\n    this.setState({\n      playerScore: this.state.playerScore + 1,\n      result: 'You Win! 🎉'\n    })\n  }\n\n  handleLose = () => {\n    this.setState({\n      computerScore: this.state.computerScore + 1,\n      result: 'You Lose 😭'\n    })\n  }\n\n  handleDraw = () => {\n    this.setState({result: `It's a tie 👍🏻`})\n  }\n\n  handlePlayAgain = () => {\n    this.setState({\n      computerChoice: '',\n      playerChoice: '',\n      count: 5,\n      timerOn: true,\n      result: ''\n    })\n  }\n\n  handleGame = choice => {\n    this.setState(({\n      playerChoice: choice,\n      timerOn: true,\n      result: ''\n    }))\n\n    this.timer = setInterval(() => {\n      const {count} = this.state;\n      const computerChoice = this.getComputerChoice();\n\n      this.setState(prevState => ({count: prevState.count - 1}))\n\n      if(count <= 1) {\n        this.setState({\n          timerOn: false,\n          count: 5,\n          computerChoice\n        });\n\n        clearInterval(this.timer)\n\n        switch(choice + computerChoice) {\n          case \"rs\":\n          case \"pr\":\n          case \"sp\":\n            this.handleWin()\n            break;\n          case \"rp\":\n          case \"ps\":\n          case \"sr\":\n              this.handleLose()\n            break;\n          case \"rr\":\n          case \"pp\":\n          case \"ss\":\n              this.handleDraw()\n            break;\n          default:\n          return null\n        }\n      }\n\n    }, 1000)\n  }\n\n\n\n  render() {\n    const {playerScore, computerScore, count, computerChoice, timerOn, playerChoice, result} = this.state;\n\n    return (\n      <div className=\"player\">\n      <header className=\"player-header\">\n       <h1 className=\"title\">Rock Paper Scissors</h1>\n      </header>\n\n        <div className=\"computer-choice\">\n          {timerOn ? (\n            <p className='timer'>{count}</p>\n          ) : (\n            <div>\n              {computerChoice === 'r' && <img className=\"image\" src={RockImage} alt=\"rock\"/>}\n              {computerChoice === 'p' && <img className=\"image\" src={PaperImage} alt=\"paper\"/>}\n              {computerChoice === 's' && <img className=\"image\" src={ScissorsImage} alt=\"scissors\"/>}\n            </div>\n          )}\n        </div>\n\n       <div className=\"score\">\n         <div className=\"computer-label badge\">computer</div>\n         <div className=\"player-label badge\">player</div>\n         <span>{computerScore}</span>\n         <div className=\"divider\"></div>\n         <span>{playerScore}</span>\n       </div>\n\n        {result ? (\n          <div className=\"result\">\n            <p>{result}</p>\n            <Button className=\"resultButton\" onClick={this.handleGame}>Play Again!</Button>\n            <Link to=\"/\">\n              <Button className=\"resultButton\">Change Mode</Button>\n            </Link>\n          </div>\n        ) : (\n          <p className=\"choose-message\">Choose your move</p>\n        )}\n\n       <div className=\"choices\">\n          <Button\n            className=\"choiceButton\"\n            onClick={this.handleGame.bind(this, 'r')}\n            active={playerChoice === 'r' ? 1 : 0}\n          >\n            <img className=\"image\" src={RockImage} alt=\"rock\"/>\n          </Button>\n\n          <Button\n            className=\"choiceButton\"\n            onClick={this.handleGame.bind(this, 'p')}\n            active={playerChoice === 'p' ? 1 : 0}\n            >\n            <img className=\"image\" src={PaperImage} alt=\"paper\"/>\n          </Button>\n\n          <Button\n            className=\"choiceButton\"\n            onClick={this.handleGame.bind(this, 's')}\n            active={playerChoice === 's' ? 1 : 0}\n          >\n            <img className=\"image\" src={ScissorsImage} alt=\"scissors\"/>\n          </Button>\n       </div>\n    </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport \"./Home.css\"\n\nimport Button from '../../components/Button/Button'\n\nexport class Home extends Component {\n  render() {\n    return (\n      <div className=\"home\">\n        <h1>Select Play Mode</h1>\n        <Link to=\"/player\">\n            <Button className=\"btn\">\n              Player VS Computer\n            </Button>\n        </Link>\n\n        <Link to=\"/computer\">\n          <Button className=\"btn\">\n            Computer VS Computer\n          </Button>\n        </Link>\n      </div>\n    )\n  }\n}\n\nexport default Home\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport RockImage from '../../assets/images/rock.png'\nimport PaperImage from '../../assets/images/paper.png'\nimport ScissorsImage from '../../assets/images/scissors.png'\nimport Button from '../../components/Button/Button'\n\nimport './Computer.css';\n\nexport default class Player extends Component {\n  state = {\n    computer1Score: 0,\n    computerScore: 0,\n    computerChoice: '',\n    computer1Choice: '',\n    count: 5,\n    timerOn: true,\n    computerResult: '',\n    computer1Result: ''\n  }\n\n  componentDidMount() {\n    this.handleGame();\n  }\n\n  getComputerChoice = () => {\n    const choices = ['r', 'p', 's'];\n    const randomNumber = Math.floor(Math.random() * 3)\n    return choices[randomNumber]\n  }\n\n  handleWin = () => {\n    this.setState({\n      computer1Score: this.state.computer1Score + 1,\n      computer1Result: 'Win! 🎉',\n      computerResult: 'Lose 😭'\n    })\n  }\n\n  handleLose = () => {\n    this.setState({\n      computerScore: this.state.computerScore + 1,\n      computer1Result: 'Lose 😭',\n      computerResult: 'Win! 🎉'\n    })\n  }\n\n  handleDraw = () => {\n    this.setState({\n      computer1Result: `It's a tie 👍🏻`,\n      computerResult: `It's a tie 👍🏻`\n    })\n  }\n\n  handleGame = () => {\n    this.setState(({\n      timerOn: true,\n      computerResult: '',\n      computer1Result: ''\n    }))\n\n    this.timer = setInterval(() => {\n      const {count} = this.state;\n      const computerChoice = this.getComputerChoice();\n      const computer1Choice = this.getComputerChoice();\n\n      this.setState(prevState => ({count: prevState.count - 1}))\n\n      if(count <= 1) {\n        this.setState({\n          timerOn: false,\n          count: 5,\n          computerChoice,\n          computer1Choice\n        });\n\n        clearInterval(this.timer)\n\n        switch(computer1Choice + computerChoice) {\n          case \"rs\":\n          case \"pr\":\n          case \"sp\":\n            this.handleWin()\n            break;\n          case \"rp\":\n          case \"ps\":\n          case \"sr\":\n              this.handleLose()\n            break;\n          case \"rr\":\n          case \"pp\":\n          case \"ss\":\n              this.handleDraw()\n            break;\n          default:\n          return null\n        }\n      }\n\n    }, 1000)\n  }\n\n\n\n  render() {\n    const {\n      computer1Score,\n      computerScore,\n      count,\n      computerChoice,\n      computer1Choice,\n      timerOn,\n      computer1Result,\n      computerResult\n    } = this.state;\n\n    return (\n      <div className=\"player\">\n      <header className=\"player-header\">\n       <h1 className=\"title\">Rock Paper Scissors</h1>\n      </header>\n\n        <div className=\"computer-choice\">\n          {timerOn ? (\n            <p className='timer'>{count}</p>\n          ) : (\n            <div>\n              {computerChoice === 'r' && <img className=\"image\" src={RockImage} alt=\"rock\"/>}\n              {computerChoice === 'p' && <img className=\"image\" src={PaperImage} alt=\"paper\"/>}\n              {computerChoice === 's' && <img className=\"image\" src={ScissorsImage} alt=\"scissors\"/>}\n            </div>\n          )}\n        </div>\n\n        {computerResult &&\n          <div className=\"result\">\n            <p>{computerResult}</p>\n          </div>\n         }\n\n       <div className=\"score\">\n         <div className=\"computer-label badge\">computer</div>\n         <div className=\"computer1-label badge\">Computer 1</div>\n         <span>{computerScore}</span>\n         <div className=\"divider\"></div>\n         <span>{computer1Score}</span>\n       </div>\n\n        {computer1Result &&\n          <div className=\"result\">\n            <p>{computer1Result}</p>\n            <Button className=\"resultButton\" onClick={this.handleGame}>Play Again!</Button>\n            <Link to=\"/\">\n              <Button className=\"resultButton\">Change Mode</Button>\n            </Link>\n          </div>\n         }\n\n        <div className=\"computer-choice\">\n          {timerOn ? (\n            <p className='timer'>{count}</p>\n          ) : (\n            <div>\n              {computer1Choice === 'r' && <img className=\"image\" src={RockImage} alt=\"rock\"/>}\n              {computer1Choice === 'p' && <img className=\"image\" src={PaperImage} alt=\"paper\"/>}\n              {computer1Choice === 's' && <img className=\"image\" src={ScissorsImage} alt=\"scissors\"/>}\n            </div>\n          )}\n        </div>\n    </div>\n    )\n  }\n}\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport Player from './containers/Player/Player'\nimport Home from './containers/Home/Home'\nimport Computer from './containers/Computer/Computer'\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/player\" component={Player} />\n          <Route path=\"/computer\" component={Computer} />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}